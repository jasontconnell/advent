package main

import (
	"fmt"
	"time"
	//"regexp"
	//"strconv"
	//"strings"
)

type Player struct {
	Name string
	HP int
	Damage int
	Defense int
	Mana int
	Spells []Spell
}

type Spell struct {
	Name string
	Cost int
	Effects []Effect
}

type EffectProperty int
const (
	Damage EffectProperty = iota
	HP EffectProperty = iota
	Defense EffectProperty = iota
	Mana EffectProperty = iota
)

type Effect struct {
	Length int
	Prop EffectProperty
	Value int
}

type BattleEffect struct {
	Countdown int
	Prop EffectProperty
	Value int
}

func main() {
	startTime := time.Now()
	boss := Player{ Name: "Boss", HP: 58, Damage: 9 }

	spells := []Spell{}
	mm := Spell{ Name: "Magic Missile", Cost: 53, Effects: []Effect{ Effect{ Length: 0, Prop: HP, Value: 4 } } }
	drain := Spell{ Name: "Drain", Cost: 73, Effects: []Effect{ Effect{ Length: 0, Prop: HP, Value: 2 }, Effect{ Length: 0, Prop: Damage, Value: 2 } } }
	shield := Spell{ Name: "Shield", Cost: 113, Effects: []Effect{ Effect{ Length: 6, Prop: Defense, Value: 7 } } }
	poison := Spell{ Name: "Poison", Cost: 173, Effects: []Effect{ Effect{ Length: 6, Prop: Damage, Value: 3 } } }
	recharge := Spell{ Name: "Recharge", Cost: 229, Effects: []Effect{ Effect{ Length: 5, Prop: Mana, Value: 101 } } }

	spells = append(spells, mm)
	spells = append(spells, drain)
	spells = append(spells, shield)
	spells = append(spells, poison)
	spells = append(spells, recharge)

	player := Player{ Name: "Jason", HP: 50, Mana: 500, Spells: spells }

	var castLists [][]Spell
	fmt.Println("cast lists", castLists)

	fmt.Println(boss)

	fmt.Println("Time", time.Since(startTime))
}

func RunSim(player, boss Player){
	effects := []BattleEffect{}
	//casts := []string{}
	//alternate := false
	for {
		// process pre-turn effects
		for _,eff := range effects {
			switch eff.Prop {
				case Damage: boss.HP -= eff.Value
				break
				case HP: player.HP += eff.Value
				break
				case Defense: player.Defense += eff.Value
				break
				case Mana: player.Mana += eff.Value
				break
			}
		}
		// attack
		// determine if one is dead


		if player.HP <= 0 || boss.HP <= 0 {
			// dead
			return
		}


		// count down effects counters
		for i := len(effects)+1; i >= 0; i-- {
			effects[i].Countdown--

			if effects[i].Countdown <= 0 {
				effects = append(effects[:i], effects[i+1:]...)  // get rid of current effect
			}
		}
	}
}

func Attack(striker, strikee *Player){
	if len(striker.Spells) > 0 {

	}
}